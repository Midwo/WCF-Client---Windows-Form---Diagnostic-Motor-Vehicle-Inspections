//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WCF_Client_Diagnostic.refwcf {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CompositeType", Namespace="http://schemas.datacontract.org/2004/07/WCFservice_diagnostic")]
    [System.SerializableAttribute()]
    public partial class CompositeType : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool BoolValueField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StringValueField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool BoolValue {
            get {
                return this.BoolValueField;
            }
            set {
                if ((this.BoolValueField.Equals(value) != true)) {
                    this.BoolValueField = value;
                    this.RaisePropertyChanged("BoolValue");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string StringValue {
            get {
                return this.StringValueField;
            }
            set {
                if ((object.ReferenceEquals(this.StringValueField, value) != true)) {
                    this.StringValueField = value;
                    this.RaisePropertyChanged("StringValue");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Car", Namespace="http://schemas.datacontract.org/2004/07/WCFservice_diagnostic")]
    [System.SerializableAttribute()]
    public partial class Car : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private WCF_Client_Diagnostic.refwcf.CarCondition conditionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string modelField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public WCF_Client_Diagnostic.refwcf.CarCondition condition {
            get {
                return this.conditionField;
            }
            set {
                if ((this.conditionField.Equals(value) != true)) {
                    this.conditionField = value;
                    this.RaisePropertyChanged("condition");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string model {
            get {
                return this.modelField;
            }
            set {
                if ((object.ReferenceEquals(this.modelField, value) != true)) {
                    this.modelField = value;
                    this.RaisePropertyChanged("model");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CarCondition", Namespace="http://schemas.datacontract.org/2004/07/WCFservice_diagnostic")]
    public enum CarCondition : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        New = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Used = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Rental = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Broken = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Stolen = 4,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="refwcf.IService1")]
    public interface IService1 {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetData", ReplyAction="http://tempuri.org/IService1/GetDataResponse")]
        string GetData(int value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetData", ReplyAction="http://tempuri.org/IService1/GetDataResponse")]
        System.Threading.Tasks.Task<string> GetDataAsync(int value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetDataUsingDataContract", ReplyAction="http://tempuri.org/IService1/GetDataUsingDataContractResponse")]
        WCF_Client_Diagnostic.refwcf.CompositeType GetDataUsingDataContract(WCF_Client_Diagnostic.refwcf.CompositeType composite);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetDataUsingDataContract", ReplyAction="http://tempuri.org/IService1/GetDataUsingDataContractResponse")]
        System.Threading.Tasks.Task<WCF_Client_Diagnostic.refwcf.CompositeType> GetDataUsingDataContractAsync(WCF_Client_Diagnostic.refwcf.CompositeType composite);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/Authentication", ReplyAction="http://tempuri.org/IService1/AuthenticationResponse")]
        bool Authentication(string loginNamecrypt, string passwordcrypt);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/Authentication", ReplyAction="http://tempuri.org/IService1/AuthenticationResponse")]
        System.Threading.Tasks.Task<bool> AuthenticationAsync(string loginNamecrypt, string passwordcrypt);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/hmm", ReplyAction="http://tempuri.org/IService1/hmmResponse")]
        WCF_Client_Diagnostic.refwcf.CarCondition hmm(WCF_Client_Diagnostic.refwcf.Car all);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/hmm", ReplyAction="http://tempuri.org/IService1/hmmResponse")]
        System.Threading.Tasks.Task<WCF_Client_Diagnostic.refwcf.CarCondition> hmmAsync(WCF_Client_Diagnostic.refwcf.Car all);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/getstartwork", ReplyAction="http://tempuri.org/IService1/getstartworkResponse")]
        string getstartwork(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/getstartwork", ReplyAction="http://tempuri.org/IService1/getstartworkResponse")]
        System.Threading.Tasks.Task<string> getstartworkAsync(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/Business_employe", ReplyAction="http://tempuri.org/IService1/Business_employeResponse")]
        System.Data.DataSet Business_employe(string login);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/Business_employe", ReplyAction="http://tempuri.org/IService1/Business_employeResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> Business_employeAsync(string login);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IService1Channel : WCF_Client_Diagnostic.refwcf.IService1, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Service1Client : System.ServiceModel.ClientBase<WCF_Client_Diagnostic.refwcf.IService1>, WCF_Client_Diagnostic.refwcf.IService1 {
        
        public Service1Client() {
        }
        
        public Service1Client(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public Service1Client(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string GetData(int value) {
            return base.Channel.GetData(value);
        }
        
        public System.Threading.Tasks.Task<string> GetDataAsync(int value) {
            return base.Channel.GetDataAsync(value);
        }
        
        public WCF_Client_Diagnostic.refwcf.CompositeType GetDataUsingDataContract(WCF_Client_Diagnostic.refwcf.CompositeType composite) {
            return base.Channel.GetDataUsingDataContract(composite);
        }
        
        public System.Threading.Tasks.Task<WCF_Client_Diagnostic.refwcf.CompositeType> GetDataUsingDataContractAsync(WCF_Client_Diagnostic.refwcf.CompositeType composite) {
            return base.Channel.GetDataUsingDataContractAsync(composite);
        }
        
        public bool Authentication(string loginNamecrypt, string passwordcrypt) {
            return base.Channel.Authentication(loginNamecrypt, passwordcrypt);
        }
        
        public System.Threading.Tasks.Task<bool> AuthenticationAsync(string loginNamecrypt, string passwordcrypt) {
            return base.Channel.AuthenticationAsync(loginNamecrypt, passwordcrypt);
        }
        
        public WCF_Client_Diagnostic.refwcf.CarCondition hmm(WCF_Client_Diagnostic.refwcf.Car all) {
            return base.Channel.hmm(all);
        }
        
        public System.Threading.Tasks.Task<WCF_Client_Diagnostic.refwcf.CarCondition> hmmAsync(WCF_Client_Diagnostic.refwcf.Car all) {
            return base.Channel.hmmAsync(all);
        }
        
        public string getstartwork(string name) {
            return base.Channel.getstartwork(name);
        }
        
        public System.Threading.Tasks.Task<string> getstartworkAsync(string name) {
            return base.Channel.getstartworkAsync(name);
        }
        
        public System.Data.DataSet Business_employe(string login) {
            return base.Channel.Business_employe(login);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> Business_employeAsync(string login) {
            return base.Channel.Business_employeAsync(login);
        }
    }
}
